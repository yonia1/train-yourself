"use strict";
var geolocation = require("nativescript-geolocation");
var core_1 = require("@angular/core");
var minimumUpdateTime = 1000 * 10;
var LocationService = (function () {
    function LocationService() {
    }
    LocationService.prototype.enableLocation = function () {
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
    };
    LocationService.prototype.startSession = function () {
        var _this = this;
        this.initSessionVars();
        this.watchId = geolocation.watchLocation(function (loc) {
            if (loc) {
                console.log("Received location: " + loc);
                _this.updateSessionData(loc);
            }
        }, function (e) {
            console.log("Error: " + e.message);
        }, { desiredAccuracy: 3, updateDistance: 10, minimumUpdateTime: minimumUpdateTime });
        // Should update every 20 seconds according to Google documentation. Not verified.
    };
    LocationService.prototype.updateSessionData = function (loc) {
        var last_idx = this.locations.length - 1;
        if (last_idx >= 0)
            this.totalDistance +=
                this.getDistance(loc, this.locations[this.locations.length - 1].location);
        this.locations.push({
            location: loc,
            currentTime: new Date().getTime()
        });
        console.log("total distance " + this.totalDistance);
    };
    LocationService.prototype.initSessionVars = function () {
        this.locations = [];
        this.totalDistance = 0;
        this.totalTime = 0;
    };
    LocationService.prototype.stopSession = function () {
        if (this.watchId) {
            geolocation.clearWatch(this.watchId);
        }
    };
    LocationService.prototype.getDistance = function (loc1, loc2) {
        var distance = geolocation.distance(loc1, loc2);
        console.log("Distance between loc1 and loc2 is: " + distance);
        return distance;
    };
    LocationService.prototype.getLastAvgSpeed = function () {
        if (this.locations.length < 2)
            return;
        var total_events = this.locations.length;
        var lastPoint = this.locations[total_events - 1];
        var beforePoint = this.locations[total_events - 2];
        return this.getDistance(lastPoint.location, beforePoint.location) /
            (lastPoint.currentTime - beforePoint.currentTime);
    };
    return LocationService;
}());
LocationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], LocationService);
exports.LocationService = LocationService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNEQUF5RDtBQUN6RCxzQ0FBMkM7QUFRM0MsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBR3BDLElBQWEsZUFBZTtJQU14QjtJQUNBLENBQUM7SUFFTSx3Q0FBYyxHQUFyQjtRQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzQixXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUN4QyxDQUFDO0lBQ0wsQ0FBQztJQUVNLHNDQUFZLEdBQW5CO1FBQUEsaUJBaUJDO1FBZkcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FDbkMsVUFBQyxHQUFHO1lBQ0QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUV6QyxLQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFaEMsQ0FBQztRQUNMLENBQUMsRUFDRCxVQUFVLENBQUM7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxFQUNELEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUFDLENBQUMsQ0FBQztRQUNwRixrRkFBa0Y7SUFDdEYsQ0FBQztJQUVPLDJDQUFpQixHQUF6QixVQUEwQixHQUFHO1FBQ3pCLElBQUksUUFBUSxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNqRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLGFBQWE7Z0JBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNoQixRQUFRLEVBQUcsR0FBRztZQUNkLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtTQUNwQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFrQixJQUFJLENBQUMsYUFBZSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVPLHlDQUFlLEdBQXZCO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLHFDQUFXLEdBQWxCO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0wsQ0FBQztJQUVPLHFDQUFXLEdBQW5CLFVBQW9CLElBQUksRUFBRSxJQUFJO1FBQzFCLElBQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMscUNBQXFDLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRU8seUNBQWUsR0FBdkI7UUFDSSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDO1FBQ1gsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDM0MsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDO1lBQzdELENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFeEQsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQTFFRCxJQTBFQztBQTFFWSxlQUFlO0lBRDNCLGlCQUFVLEVBQUU7O0dBQ0EsZUFBZSxDQTBFM0I7QUExRVksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2VvbG9jYXRpb24gPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCIpO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBQb2ludEluVGltZSB7XG4gICAgbG9jYXRpb246IGFueTtcbiAgICBjdXJyZW50VGltZTphbnk7XG59XG5cbmNvbnN0IG1pbmltdW1VcGRhdGVUaW1lID0gMTAwMCAqIDEwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9jYXRpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHdhdGNoSWQ6IGFueTtcbiAgICBwcml2YXRlIGxvY2F0aW9uczogUG9pbnRJblRpbWVbXTtcbiAgICBwcml2YXRlIHRvdGFsRGlzdGFuY2U6IG51bWJlcjtcbiAgICBwcml2YXRlIHRvdGFsVGltZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGVuYWJsZUxvY2F0aW9uKCkge1xuICAgICAgICBpZiAoIWdlb2xvY2F0aW9uLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydFNlc3Npb24oKSB7XG5cbiAgICAgICAgdGhpcy5pbml0U2Vzc2lvblZhcnMoKTtcbiAgICAgICAgdGhpcy53YXRjaElkID0gZ2VvbG9jYXRpb24ud2F0Y2hMb2NhdGlvbihcbiAgICAgICAgICAgICAobG9jKT0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgbG9jYXRpb246IFwiICsgbG9jKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlc3Npb25EYXRhKGxvYyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUubWVzc2FnZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge2Rlc2lyZWRBY2N1cmFjeTogMywgdXBkYXRlRGlzdGFuY2U6IDEwLCBtaW5pbXVtVXBkYXRlVGltZTogbWluaW11bVVwZGF0ZVRpbWV9KTtcbiAgICAgICAgLy8gU2hvdWxkIHVwZGF0ZSBldmVyeSAyMCBzZWNvbmRzIGFjY29yZGluZyB0byBHb29nbGUgZG9jdW1lbnRhdGlvbi4gTm90IHZlcmlmaWVkLlxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU2Vzc2lvbkRhdGEobG9jKSB7XG4gICAgICAgIGxldCBsYXN0X2lkeDogbnVtYmVyID0gdGhpcy5sb2NhdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYobGFzdF9pZHg+PTApXG4gICAgICAgICAgICB0aGlzLnRvdGFsRGlzdGFuY2UgKz1cbiAgICAgICAgICAgICAgICB0aGlzLmdldERpc3RhbmNlKGxvYywgdGhpcy5sb2NhdGlvbnNbdGhpcy5sb2NhdGlvbnMubGVuZ3RoIC0gMV0ubG9jYXRpb24pO1xuICAgICAgICB0aGlzLmxvY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGxvY2F0aW9uIDogbG9jLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgdG90YWwgZGlzdGFuY2UgJHt0aGlzLnRvdGFsRGlzdGFuY2V9YCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0U2Vzc2lvblZhcnMoKSB7XG4gICAgICAgIHRoaXMubG9jYXRpb25zID0gW107XG4gICAgICAgIHRoaXMudG90YWxEaXN0YW5jZSA9IDA7XG4gICAgICAgIHRoaXMudG90YWxUaW1lID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcFNlc3Npb24oKSB7XG4gICAgICAgIGlmICh0aGlzLndhdGNoSWQpIHtcbiAgICAgICAgICAgIGdlb2xvY2F0aW9uLmNsZWFyV2F0Y2godGhpcy53YXRjaElkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RGlzdGFuY2UobG9jMSwgbG9jMik6IGFueSB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZ2VvbG9jYXRpb24uZGlzdGFuY2UobG9jMSwgbG9jMilcbiAgICAgICAgY29uc29sZS5sb2coXCJEaXN0YW5jZSBiZXR3ZWVuIGxvYzEgYW5kIGxvYzIgaXM6IFwiICsgZGlzdGFuY2UpO1xuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRMYXN0QXZnU3BlZWQoKXtcbiAgICAgICAgaWYodGhpcy5sb2NhdGlvbnMubGVuZ3RoPDIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRvdGFsX2V2ZW50cyA9IHRoaXMubG9jYXRpb25zLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gdGhpcy5sb2NhdGlvbnNbdG90YWxfZXZlbnRzLTFdO1xuICAgICAgICBjb25zdCBiZWZvcmVQb2ludCA9IHRoaXMubG9jYXRpb25zW3RvdGFsX2V2ZW50cy0yXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2UobGFzdFBvaW50LmxvY2F0aW9uICxiZWZvcmVQb2ludC5sb2NhdGlvbikvXG4gICAgICAgICAgICAobGFzdFBvaW50LmN1cnJlbnRUaW1lLWJlZm9yZVBvaW50LmN1cnJlbnRUaW1lKTtcblxuICAgIH1cbn1cbiJdfQ==